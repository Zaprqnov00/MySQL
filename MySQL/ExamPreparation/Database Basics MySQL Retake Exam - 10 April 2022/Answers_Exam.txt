# 1.TABLE DESIGN

CREATE TABLE countries(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(30) NOT NULL UNIQUE,
`continent` VARCHAR(30) NOT NULL,
`currency` VARCHAR(5) NOT NULL
);

CREATE TABLE genres(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE actors(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(50) NOT NULL,
`last_name` VARCHAR(50) NOT NULL,
`birthdate` DATE NOT NULL,
`height` INT,
`awards` INT,
`country_id` INT NOT NULL,
CONSTRAINT fk_countryid
FOREIGN KEY (`country_id`)
REFERENCES `countries` (`id`)
);

CREATE TABLE movies_additional_info(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`rating` DECIMAL(10,2) NOT NULL,
`runtime` INT NOT NULL,
`picture_url` VARCHAR(80) NOT NULL,
`budget` DECIMAL(10,2),
`release_date` DATE NOT NULL,
`has_subtitles` TINYINT(1),
`description` TEXT
);

CREATE TABLE movies(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`title` VARCHAR(70) NOT NULL UNIQUE,
`country_id` INT NOT NULL,
`movie_info_id` INT NOT NULL UNIQUE,
CONSTRAINT fk_movie_country_id
FOREIGN KEY (`country_id`)
REFERENCES `countries` (`id`),
CONSTRAINT fk_movie_info_id
FOREIGN KEY (`movie_info_id`)
REFERENCES `movies_additional_info` (`id`)
);

CREATE TABLE movies_actors(
`movie_id` INT,
`actor_id`INT,
KEY pk_movie_actors(`movie_id`, `actor_id`),
CONSTRAINT fk_movies_actors_id
FOREIGN KEY (`movie_id`)
REFERENCES `movies` (`id`),
CONSTRAINT fk_actor_id
FOREIGN KEY (`actor_id`)
REFERENCES `actors` (`id`)
);

CREATE TABLE genres_movies(
`genre_id` INT,
`movie_id` INT,
KEY pk_genre_movies(`genre_id`, `movie_id`),
CONSTRAINT fk_genre_id
FOREIGN KEY (`genre_id`)
REFERENCES `genres` (`id`),
CONSTRAINT fk_movie_id
FOREIGN KEY (`movie_id`)
REFERENCES `movies` (`id`)
);


# 2.INSERT

INSERT INTO actors(`first_name`, `last_name`, `birthdate`, `height`, `awards`, `country_id`)
SELECT
(REVERSE(a.first_name)), 
(REVERSE(a.last_name)),  
(DATE(a.birthdate - 2)),
(a.height + 10),
(a.country_id), (3)
FROM actors AS a
WHERE a.id <= 10;


# 3.UPDATE

UPDATE `movies_additional_info` AS mai
SET 
mai.runtime = mai.runtime - 10
WHERE
mai.id BETWEEN 15 AND 25;

# 4.DELETE

DELETE m
FROM `countries` m
LEFT JOIN `movies` AS m2 ON m.id = m2.country_id
WHERE m2.country_id IS NULL;


#5.COUNTRIES

SELECT c.`id`, c.`name`, c.`continent`, c.`currency`
FROM `countries` AS c
ORDER BY c.`currency` DESC, c.`id`;


#6.OLD MOVIES

SELECT ma.`id`, m.`title`, ma.`runtime`, ma.`budget`, ma.`release_date`
FROM `movies_additional_info` AS ma
JOIN `movies` AS m 
ON ma.id = m.movie_info_id
WHERE YEAR(ma.release_date) BETWEEN '1996' AND '1999'
ORDER BY ma.runtime, ma.id
LIMIT 20;


#7.MOVIE CASTING

SELECT CONCAT(a.`first_name`, ' ',a.`last_name`) AS 'full_name',
 CONCAT(REVERSE(a.`last_name`),char_length(a.`last_name`),'@cast.com') AS 'email',
 (2022 - YEAR(a.birthdate)) AS 'age',
 a.`height`
 FROM `actors` AS a
 LEFT JOIN `movies_actors` AS ma ON a.id = ma.actor_id
 WHERE ma.movie_id IS NULL
 ORDER BY a.`height`;


#8.INTERNATIONAL FESTIVAL

SELECT `name`, COUNT(`country_id`) AS 'movies_count'
FROM `countries` AS c
JOIN `movies` AS m
ON
c.id = m.country_id
GROUP BY `country_id`
HAVING movies_count  >= 7
ORDER BY `name` DESC;


#9.RATING SYSTEM

SELECT `title`,
(CASE 
	WHEN mi.rating <= 4 THEN 'poor'
    WHEN mi.rating <= 7 THEN 'good'
    ELSE 'excellent'
END) AS 'rating',
IF(mi.has_subtitles = 1, 'english', '-') AS 'subtitles',
mi.`budget`
FROM `movies_additional_info` AS mi
JOIN `movies` AS m
ON mi.id = m.movie_info_id
ORDER BY `budget` DESC;


#10.HISTORY MOVIES

CREATE FUNCTION udf_actor_history_movies_count(full_name VARCHAR(50))
RETURNS INT 
DETERMINISTIC
BEGIN
	DECLARE movies_count INT;
    SET movies_count := (
    SELECT COUNT(g.name) movies
        FROM actors a
                 JOIN movies_actors ma on a.id = ma.actor_id
                 JOIN genres_movies gm on ma.movie_id = gm.movie_id
                 JOIN genres g on g.id = gm.genre_id
        WHERE CONCAT(a.first_name, ' ', a.last_name) = full_name AND g.name = 'History'
        GROUP BY  g.name);
    RETURN movies_count;
END

#11.MOVIE AWARDS

CREATE PROCEDURE udp_award_movie (movie_title VARCHAR(50))
BEGIN
	UPDATE `actors` AS a
		JOIN `movies` AS m ON a.country_id = m.country_id
        SET a.`awards` = a.`awards` + 1
        WHERE m.title = movie_title;
END